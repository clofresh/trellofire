var _action_parser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = [],
        peg$c2 = /^[ ]/,
        peg$c3 = { type: "class", value: "[ ]", description: "[ ]" },
        peg$c4 = null,
        peg$c5 = function(head, tail) {
             var vals = [head];
             if (tail === null) {
                 return vals;
             } else {
                 return vals.concat(tail);
             }
        },
        peg$c6 = ":",
        peg$c7 = { type: "literal", value: ":", description: "\":\"" },
        peg$c8 = function(f, value) { return {field: f, value: value} },
        peg$c9 = "title",
        peg$c10 = { type: "literal", value: "title", description: "\"title\"" },
        peg$c11 = "\"",
        peg$c12 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c13 = /^[^"]/,
        peg$c14 = { type: "class", value: "[^\"]", description: "[^\"]" },
        peg$c15 = function(val) { return strconcat(val) },
        peg$c16 = /^[^ ]/,
        peg$c17 = { type: "class", value: "[^ ]", description: "[^ ]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parsequery();

      return s0;
    }

    function peg$parsequery() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseterm();
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c2.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c2.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequery();
          if (s3 === peg$FAILED) {
            s3 = peg$c4;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c5(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseterm() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefield();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c8(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefield() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c9) {
        s0 = peg$c9;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c13.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c13.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c15(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c16.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c16.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
          }
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c15(s1);
        }
        s0 = s1;
      }

      return s0;
    }


        function strconcat(s) { return s.join("") }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
define('peg/action',[],function() { return _action_parser; });

define('action',["./peg/action"], function(Parser) {
  return {
    parse: function(str) {
      var output = {
        fields: {}
      };
      var terms = Parser.parse(str);
      for (var i = 0; i < terms.length; ++i) {
        var term = terms[i];

        var field = term.field;
        var value = term.value;
        switch (field) {
          case "title":
            output.fields[field] = value;
            break;
        }
      }
      output.terms = terms;
      output.str = str;
      return output;
    }
  };
});

var _query_parser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = [],
        peg$c2 = /^[ ]/,
        peg$c3 = { type: "class", value: "[ ]", description: "[ ]" },
        peg$c4 = null,
        peg$c5 = function(head, tail) {
             var vals = [head];
             if (tail === null) {
                 return vals;
             } else {
                 return vals.concat(tail);
             }
        },
        peg$c6 = ":",
        peg$c7 = { type: "literal", value: ":", description: "\":\"" },
        peg$c8 = function(uop, field, value) {
             return {
                 field: field,
                 value: value,
                 op:    uop
             }
         },
        peg$c9 = function(field, value) { return {field: field, value: value} },
        peg$c10 = "board",
        peg$c11 = { type: "literal", value: "board", description: "\"board\"" },
        peg$c12 = "groupby",
        peg$c13 = { type: "literal", value: "groupby", description: "\"groupby\"" },
        peg$c14 = "sort",
        peg$c15 = { type: "literal", value: "sort", description: "\"sort\"" },
        peg$c16 = "sortdir",
        peg$c17 = { type: "literal", value: "sortdir", description: "\"sortdir\"" },
        peg$c18 = "title",
        peg$c19 = { type: "literal", value: "title", description: "\"title\"" },
        peg$c20 = "\"",
        peg$c21 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c22 = /^[^"]/,
        peg$c23 = { type: "class", value: "[^\"]", description: "[^\"]" },
        peg$c24 = function(val) { return strconcat(val) },
        peg$c25 = /^[^ ]/,
        peg$c26 = { type: "class", value: "[^ ]", description: "[^ ]" },
        peg$c27 = "!",
        peg$c28 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c29 = function() { return {type: "unary", name: "not"} },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parsequery();

      return s0;
    }

    function peg$parsequery() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseterm();
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c2.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c2.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequery();
          if (s3 === peg$FAILED) {
            s3 = peg$c4;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c5(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseterm() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsenot();
      if (s1 === peg$FAILED) {
        s1 = peg$c4;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefilter();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c6;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestring();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c8(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s2 = peg$c6;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsestring();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c9(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseidentifier() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c10) {
        s0 = peg$c10;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c12) {
          s0 = peg$c12;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c14) {
            s0 = peg$c14;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c16) {
              s0 = peg$c16;
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parsefilter();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsefilter() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c18) {
        s0 = peg$c18;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c20;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c22.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c22.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c23); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c20;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c24(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c25.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c25.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c26); }
            }
          }
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c24(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenot() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s1 = peg$c27;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c2.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c2.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c29();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }


        function strconcat(s) { return s.join("") }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
define('peg/query',[],function() { return _query_parser; });

define('query',["./peg/query"], function(Parser) {
  return {
    parse: function(str) {
      var output = {
        filters: []
      };
      var terms = Parser.parse(str);
      for (var i = 0; i < terms.length; ++i) {
        var term = terms[i];

        var field = term.field;
        var value = term.value;
        switch (field) {
          case "board":
          case "groupby":
          case "sort":
          case "sortdir":
            output[field] = value;
            break;
          case "title":
            output.filters.push(term);
            break;
        }
      }
      output.terms = terms;
      output.str = str;
      return output;
    }
  };
});

define('stores/lists',[],function() {
  var module = {};
  module.lists = {};

  module.set = function(key, val) {
    module.lists[key] = val;
  };

  module.get = function(key) {
    return module.lists[key];
  };

  return module;
});

define('stores/selected',[],function() {
  var module = {};
  module.selected = {};

  module.set = function(key, val) {
    module.selected[key] = val;
  };

  module.any = function() {
    for (var key in module.selected) {
      if (module.selected[key]) {
        return true;
      }
    }
    return false;
  };

  module.getSelected = function() {
    var selected = [];
    // For some reason for..in didn't work here
    Object.keys(module.selected).forEach(function(key) {
      if (module.selected[key]) {
        selected.push(key);
      }
    });
    return selected;
  };

  return module;
});


define('views/trello_item',[
  'react',
  'stores/lists',
  'stores/selected'
], function(React, Lists, Selected) {

  return React.createClass({
    getInitialState: function() {
      return {
        checked: false
      };
    },

    handleClick: function(event) {
      if (event.target.tagName !== "A") {
        var newVal = !this.state.checked;
        this.setState({
          checked: newVal
        });
        Selected.set(this.props.data.id, newVal);
      }
    },

    render: function() {
      return (
        React.createElement("tr", {className: "trelloItem", onClick: this.handleClick}, 
          React.createElement("td", {className: "checkCol"}, 
            React.createElement("input", {type: "checkbox", checked: this.state.checked, onChange: this.handleClick})
          ), 
          React.createElement("td", {className: "titleCol"}, React.createElement("a", {href: this.props.data.url}, this.props.data.name)), 
          React.createElement("td", {className: "listCol"}, Lists.get(this.props.data.idList).name), 
          React.createElement("td", {className: "stateCol"}, this.props.data.closed ? "closed" : "open"), 
          React.createElement("td", {className: "dueCol"}, this.props.data.due)
        )
      );
    }
  });

});


define('views/trello_group',['react', './trello_item'], function(React, TrelloItem) {
  return React.createClass({
    render: function() {
      var rows = this.props.cards.map(function(card) {
        return (
          React.createElement(TrelloItem, {key: card.id, data: card})
        );
      });

      var heading;
      if (this.props.group !== null) {
        heading = React.createElement("div", {className: "panel-heading"}, 
                    React.createElement("h1", {className: "panel-title"}, this.props.group)
                  );
      }

      return (
        React.createElement("div", {className: "trelloGroup panel panel-info"}, 
          heading, 
          React.createElement("table", {className: "trello table table-striped"}, 
            React.createElement("thead", null, 
              React.createElement("tr", null, 
                React.createElement("th", {className: "checkCol"}, " "), 
                React.createElement("th", {className: "titleCol"}, "Title"), 
                React.createElement("th", {className: "listCol"}, "List"), 
                React.createElement("th", {className: "stateCol"}, "State"), 
                React.createElement("th", {className: "dueCol"}, "Due")
              )
            ), 
            React.createElement("tbody", null, 
              rows
            )
          )
        )
      );
    }
  });
});


define('views/query_bar',['react', 'query'], function(React, Query) {
  return React.createClass({
    getDefaultProps: function() {
      return {
        queue: []
      };
    },
    getInitialState: function() {
      return Query.parse(this.props.defaultQuery);
    },
    handleSubmit: function(event) {
      event.preventDefault();
      this.updateVal(event.target.getElementsByTagName('input')[0].value);
    },
    handleChange: function(event) {
      if (this.state.timer) {
        clearTimeout(this.state.timer);
      }
      var input = event.target;
      this.state.timer = setTimeout(function() {
        this.updateVal(input.value);
      }.bind(this), 500);
    },
    updateVal: function(val) {
      var state;
      if (val === "") {
        state = {
          str: ""
        };
      } else {
        try {
          state = Query.parse(val);
          var url = window.location.origin + window.location.pathname
            + '?q=' + encodeURIComponent(val);
          history.replaceState(null, null, url);
          localStorage.query = val;
        } catch ( e ) {
          console.log(e);
        }
      }
      this.setState(state);
      this.props.onUpdate(state);
    },
    render: function() {
      return (
        React.createElement("h3", {className: "page-header"}, React.createElement("form", {onSubmit: this.handleSubmit}, React.createElement("input", {id: "queryInput", type: "text", className: "form-control", defaultValue: this.state.str, onChange: this.handleChange})))
      );
    }
  });
});


define('views/trello_board',[
  'react',
  'trello',
  'action',
  'query',
  'stores/lists',
  'stores/selected',
  './trello_group',
  './query_bar'
], function(React, Trello, Action, Query, Lists, Selected, TrelloGroup,
  QueryBar) {
  return React.createClass({
    getInitialState: function() {
      return {
        response: {
          cards: []
        },
        filtered: [],
        query: Query.parse(this.props.defaultQuery)
      };
    },
    updateBoard: function(query) {
      console.log('Updating board with query', query);
      Trello.boards.get(query.board, {
        cards: 'all',
        lists: 'all'
      }, function(data) {
        for (var i = 0; i < data.lists.length; i++) {
          var list = data.lists[i];
          Lists.set(list.id, list);
        }
        this.setState({
          response: data,
          filtered: [],
          query: query
        });
      }.bind(this));
    },
    componentDidMount: function() {
      this.updateBoard(this.state.query);
    },

    updateQuery: function(query) {
      if (this.state.query.board !== query.board) {
        this.updateBoard(query);
      } else {
        this.state.query = query;
        this.setState(this.state);
      }
    },

    handleActionMenu: function(event) {
      // If any items are selected, open the context menu
      if (Selected.any()) {
        event.preventDefault();

        // Move the context menu to the click position
        var menu = document.getElementById('context-menu');
        menu.style.left = JSON.stringify(event.pageX - 100) + 'px';
        menu.style.top = JSON.stringify(event.pageY - 80) + 'px';

        // Display it
        if (!menu.classList.contains('open')) {
          menu.classList.add('open');
        }

        // Clear the input and move the keyboard focus there
        var input = document.getElementById('context-menu-input');
        input.value = "";
        input.focus();

        // Set up an event handle to close the menu on esc key
        document.onkeydown = function(event) {
          if (event.keyCode === 27) { // Esc key code
            this.closeMenu();
            event.preventDefault();
          }
        }.bind(this);
      }
    },

    closeMenu: function() {
      var menu = document.getElementById('context-menu');
      menu.classList.remove('open');
      document.onkeydown = null;
    },

    handleActionSubmit: function(event) {
      event.preventDefault();
      var parsed = Action.parse(event.target.getElementsByTagName('input')[0].value);
      var cardIds = Selected.getSelected();
      for (var field in parsed.fields) {
        switch (field) {
          case "title":
            var newVal = parsed.fields[field];
            var pending = [];
            for (var i = 0; i < cardIds.length; ++i) {
              var cardId = cardIds[i];
              console.log(cardId, newVal);
              pending.push(Trello.put('cards/' + cardId + '/name',
                {
                  value: newVal
                }));
              for (var j = 0; j < this.state.response.cards.length; ++j) {
                var card = this.state.response.cards[i];
                if (card.id === cardId) {
                  card.name = newVal;
                }
              }
            }
            console.log(pending);
            // /1/cards/[card id or shortlink]/name
            break;
        }
      }
      this.setState(this.state);
      this.closeMenu();
    },

    render: function() {
      var grouped = {};
      var cards = this.state.response.cards;
      var filters = this.state.query.filters;
      var groupby = this.state.query.groupby;
      for (var i = 0; i < cards.length; ++i) {
        var card = cards[i];

        // Apply the filters
        var matched = true;
        for (var j = 0; j < filters.length; ++j) {
          var filter = filters[j];
          if (filter.op && filter.op.name == "not") {
            matched = matched && !card.name.match(filter.value);
          } else {
            matched = matched && card.name.match(filter.value);
          }
        }

        if (matched) {
          // Apply the grouping
          var key = card[groupby] || "ungrouped";
          if (grouped[key] === undefined) {
            grouped[key] = [card];
          } else {
            grouped[key].push(card);
          }
        }
      }

      // Apply the sorting
      var sortKey = this.state.query.sort;
      var sorter = null;
      if (sortKey !== undefined) {
        sorter = function(a, b) {
          return a[sortKey] > b[sortKey];
        };
      }

      // Render the groups
      var groups = [];
      for (var group in grouped) {
        var cards = grouped[group];
        if (sorter !== null) {
          cards.sort(sorter);
        }
        var groupName;
        if (groupby === undefined) {
          groupName = null;
        } else {
          groupName = this.groupName(group);
        }
        groups.push(
          React.createElement(TrelloGroup, {key: group, group: groupName, cards: cards})
        );
      }

      return (
        React.createElement("div", {className: "container", onContextMenu: this.handleActionMenu}, 
          React.createElement(QueryBar, {defaultQuery: this.props.defaultQuery, onUpdate: this.updateQuery}), " ", groups, 
          React.createElement("div", {id: "context-menu", className: "dropdown"}, 
            React.createElement("ul", {className: "dropdown-menu"}, 
              React.createElement("li", null, 
                React.createElement("form", {id: "action-form", onSubmit: this.handleActionSubmit}, 
                  React.createElement("label", null, "Action: "), 
                  React.createElement("input", {id: "context-menu-input", text: "type"})
                )
              )
            )
          )
        )
      );
    },

    groupName: function(group) {
      if (this.state.query.groupby === "idList") {
        var list = Lists.get(group);
        if (list !== undefined) {
          return list.name;
        } else {
          return "N/A";
        }
      } else {
        return group;
      }
    }
  });
});


define('app',['react', './views/trello_board'], function(React, TrelloBoard) {
  var App = {};
  App.init = function(query, el) {
    var el = el || document.body;
    React.render(React.createElement(TrelloBoard, {defaultQuery: query}), el);
  };

  return App;
});

define('util',{
  setQueryString: function(qobj) {
    var pairs = [];
    for (var key in qobj) {
      pairs.push(key + "=" + qobj[key]);
    }
    window.location.search = "?" + pairs.join("&");
  },
  getQueryString: function() {
    var kv = window.location.search.substr(1).split('&');
    if (kv == "") return {};
    var obj = {};

    for (var i = 0; i < kv.length; ++i) {
      var pair = kv[i].split('=', 2);
      if (pair.length == 1) {
        obj[pair[0]] = "";
      } else {
        obj[pair[0]] = decodeURIComponent(pair[1].replace(/\+/g, " "));
      }
    }
    return obj;
  }
});

require.config({
  baseUrl: 'js',
  paths: {
    bootstrap: "//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.5/js/bootstrap.min",
    jquery: "//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min",
    jsx: "bower_components/requirejs-react-jsx/jsx",
    JSXTransformer: "//cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer",
    react: "//cdnjs.cloudflare.com/ajax/libs/react/0.13.3/react",
    text: "bower_components/requirejs-text/text",
    trello: "//api.trello.com/1/client.js?key=cd8f1241e56eb1c3d1fc2eb3b1d0708f"
  },

  shim: {
    bootstrap: ['jquery'],
    JSXTransformer: "JSXTransformer",
    react: {
      exports: "React"
    },
    trello: {
      deps: ['jquery'],
      exports: 'Trello',
    }
  },

  config: {
    jsx: {
      fileExtension: ".jsx",
      transformOptions: {
        harmony: true,
        stripTypes: false,
        inlineSourceMap: true
      },
      usePragma: false
    }
  }
});

require(['app', 'jquery', 'trello', 'bootstrap', 'util'], function(
  App, jQuery, Trello, Bootstrap, Util) {

  Trello.authorize({
    name: "Trellofire",
    scope: {
      read: true,
      write: true,
      account: false
    },
    expiration: "never",
    success: function() {
      var qstr = Util.getQueryString();
      var query = qstr.q
        || localStorage.query
        || 'board:nC8QJJoZ groupby:idList';
      App.init(query, document.getElementById('app'));
    },
    error: function() {
      alert('error');
    }
  });
});

define("main", function(){});


//# sourceMappingURL=main.js.map